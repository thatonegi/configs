#! /bin/sh
### BEGIN INIT INFO
# Provides:          firewalld
# Required-Start:    $remote_fs dbus
# Required-Stop:     $remote_fs dbus
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: dynamic firewall daemon
# Description:       firewalld is a dynamically managed firewall daemon
#                    with support for network/firewall zones to define
#                    the trust level of network connections or interfaces.
#                    It provides a D-Bus interface for services or
#                    applications to add and apply firewall rules on-the-fly.
### END INIT INFO

#
# Author: Michael Biebl <biebl@debian.org>
#

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="dynamic firewall daemon"
NAME=firewalld

DAEMON=/usr/sbin/firewalld
PIDFILE=/var/run/firewalld.pid

SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Define LSB log_* functions.
. /lib/lsb/init-functions

do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   other if daemon could not be started or a failure occured
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON
}

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   other if daemon could not be stopped or a failure occurred
	start-stop-daemon --stop --quiet --retry 5 --pidfile $PIDFILE --name $NAME
}

do_reload()
{
	start-stop-daemon --stop --signal HUP --quiet --pidfile $PIDFILE --name $NAME
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0) log_end_msg 0 ;;
		1) log_progress_msg "already started"
		   log_end_msg 0 ;;
		*) log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0) log_end_msg 0 ;;
		1) log_progress_msg "already stopped"
		   log_end_msg 0 ;;
		*) log_end_msg 1 ;;
	esac
	;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	$0 stop
	$0 start
	;;
  status)
	status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|reload|status}" >&2
	exit 3
	;;
esac

:
